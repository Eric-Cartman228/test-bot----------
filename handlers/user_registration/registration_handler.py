from states import UserState
from sqlalchemy.ext.asyncio import AsyncSession

from aiogram.fsm.context import FSMContext

from aiogram.types import Message
from aiogram.filters import CommandStart

from aiogram import Router
from services import check_func, create_user


from .programms import programm_router
from .users_subscription import subscription_checker_router

from keyboards import main_kb_usesr

router = Router()


router.include_routers(programm_router, subscription_checker_router)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession):

    if await check_func(message.from_user.id, session):
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –Ω–∞ –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏—Ö –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_kb_usesr,
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§.–ò.–û.):"
        )
        await state.set_state(UserState.name)


@router.message(UserState.name)
async def get_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if all(part.isalpha() for part in name.split()):
        await state.update_data(name=name)
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Email-–∞–¥—Ä–µ—Å –¥–ª—è —Å–≤—è–∑–∏:"
        )
        await state.set_state(UserState.email)
    else:
        await message.answer("–û—à–∏–±–∫–∞!–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")


@router.message(UserState.email)
async def get_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ù–∞–∫–æ–Ω–µ—Ü, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await state.set_state(UserState.phone_number)


@router.message(UserState.phone_number)
async def get_phone_number(message: Message, state: FSMContext, session: AsyncSession):
    phone = message.text.strip()
    if phone.startswith("+") and phone[1:].isdigit():
        await state.update_data(phone_number=message.text)
        data = await state.get_data()
        await state.clear()
        await create_user(
            message.from_user.id,
            message.from_user.username,
            data["name"],
            data["email"],
            data["phone_number"],
            session,
        )
    else:
        await message.answer("–û—à–∏–±–∫–∞!–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
        return
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –Ω–∞ –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏—Ö –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb_usesr,
    )
