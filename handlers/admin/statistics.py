from aiogram import Router, F

from keyboards import menue

from aiogram.types import CallbackQuery, Message

from sqlalchemy.ext.asyncio import AsyncSession

from datetime import datetime

from keyboards import stat_ad_inlinekeyboard

from aiogram.fsm.context import FSMContext

from keyboards.inlinekeyboard_amin import third_inline_kb, statistic_kb_builder

from services.admin_govern_of_user.statistics_service_db import get_statistics

from services import get_statistics2, get_stat_with_sub_name

from states import GetDates

router = Router()


@router.callback_query(F.data == "statistics")
async def control_subs1(callback: CallbackQuery, session: AsyncSession):
    stats = await get_statistics(session)
    await callback.message.answer(
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['subscribers_count']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫—É: {stats['ending_subs_count']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['finished_subs_count']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['extended_subs_count']}",
        reply_markup=third_inline_kb,
    )


@router.callback_query(F.data == "choose_period")
async def choose_period(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –¥–∞—Ç—É:")
    await state.set_state(GetDates.first_date)


@router.message(GetDates.first_date)
async def get_first_date(message: Message, state: FSMContext):
    try:
        date_obj = datetime.strptime(message.text, "%Y-%m-%d").date()
        first_date = await state.update_data(first_date=date_obj)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –¥–∞—Ç—É:")
        await state.set_state(GetDates.second_date)
    except ValueError:
        await message.answer(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä 2024-01-02)."
        )


@router.message(GetDates.second_date)
async def get_second_date(message: Message, state: FSMContext, session: AsyncSession):
    try:
        date_obj = datetime.strptime(message.text, "%Y-%m-%d").date()
        second_date = await state.update_data(second_date=date_obj)
        data = await state.get_data()
        data_sub_stat_name = data.get("sub_name_statistic")
        if not data_sub_stat_name:
            stats = await get_statistics2(
                data["first_date"], data["second_date"], session
            )
        else:
            stats = await get_stat_with_sub_name(
                data["first_date"], data["second_date"], data_sub_stat_name, session
            )
        text = "\n".join([f"{k}: {v}" for k, v in stats.items()])
        await message.answer(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:\n{text}", reply_markup=menue
        )
        await state.clear()
    except ValueError:
        await message.answer(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä 2024-01-02)."
        )


@router.callback_query(F.data == "choose_subs")
async def choose_subs(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=await statistic_kb_builder(session),
    )


@router.callback_query(F.data.startswith("stat_kb_sub:"))
async def get_sub_name(callback: CallbackQuery, state: FSMContext):
    sub_name = callback.data.replace("stat_kb_sub:", "")
    await state.update_data(sub_name_statistic=sub_name)
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–≤—É—é –¥–∞—Ç—É")
    await state.set_state(GetDates.first_date)
