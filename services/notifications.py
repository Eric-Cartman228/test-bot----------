from sqlalchemy import select, func, text
from sqlalchemy.orm import selectinload

from database.models import UserSubcriptions

from sqlalchemy.ext.asyncio import AsyncSession

from keyboards.inline_key_boards_users import user_notification_channels

from apscheduler.schedulers.asyncio import AsyncIOScheduler

import asyncio


def start_scheduler(session_maker, bot_loop):
    scheduler = AsyncIOScheduler()

    def run_in_loop():
        asyncio.run_coroutine_threadsafe(run_check(session_maker), bot_loop)

    scheduler.add_job(run_in_loop, trigger="cron", hour=21, minute=41)

    scheduler.start()


async def run_check(session_maker):
    async with session_maker() as session:
        await check_and_notify_subscriptions(session)


async def check_and_notify_subscriptions(session: AsyncSession):
    today = func.current_date()
    tomorrow = func.current_date() + text("interval '1 day'")

    stmt_soon = (
        select(UserSubcriptions)
        .options(selectinload(UserSubcriptions.subscription))
        .where(
            (UserSubcriptions.date_expired == tomorrow)
            & (UserSubcriptions.ended_sub == False)
        )
    )

    stmt_ended = (
        select(UserSubcriptions)
        .options(selectinload(UserSubcriptions.subscription))
        .where(
            (UserSubcriptions.date_expired == today)
            & (UserSubcriptions.ended_sub == False)
        )
    )

    for subs in (await session.scalars(stmt_soon)).all():
        await send_expiring_soon_notification(
            subs.user_id, subs.subscription.name, session
        )

    for subs in (await session.scalars(stmt_ended)).all():
        await send_subscription_ended_notification(
            subs.user_id, subs.subscription.name, session
        )
        subs.ended_sub = True
    await session.commit()


async def send_expiring_soon_notification(
    user_id: int, sub_name: str, session: AsyncSession
):
    from main import bot

    await bot.send_message(
        chat_id=user_id,
        text=(
            f"‚è∞ –í–Ω–∏–º–∞–Ω–∏–µ! –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ ¬´{sub_name}¬ª –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ, "
            "—á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–∞–º/–≥—Ä—É–ø–ø–∞–ºüëá:"
        ),
    )


async def send_subscription_ended_notification(
    user_id: int, sub_name: str, session: AsyncSession
):
    from main import bot

    await bot.send_message(
        chat_id=user_id,
        text=(
            f"‚ùó –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ¬´{sub_name}¬ª –∏—Å—Ç–µ–∫–ª–∞.\n"
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–∞–º/–≥—Ä—É–ø–ø–∞–ºüëá:\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        ),
    )
